// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProcessingStatus {
  PENDING // Waiting in queue, file already downloaded and saved to back-end server.
  PROCESSING // File popped from queue, begin processing.
  SAVING //File being sent to s3.
  COMPLETED //File saved to s3 and data can now be accessed by the user. Move from UnprocessedInvoice -> Invoice
  FAILED //File failed during one of these steps.
}

model Invoice {
  id                            Int               @id @default(autoincrement())
  createdAt                     DateTime          @default(now())
  updatedAt                     DateTime          @updatedAt

  fileName                      String            @unique
  originalFileName              String
  mimeType                      String
  filePath                      String
  currentProcessingStatus       ProcessingStatus  @default(PENDING)

  projectName                   String?
  invoiceType                   String?
  paymentStatus                 String?

  CustomerName                  String?
  CustomerId                    String?
  PurchaseOrder                 String?
  InvoiceId                     String?
  InvoiceDate                   String?
  DueDate                       String?

  VendorName                    String?
  VendorAddress                 String?
  VendorAddressRecipient        String?

  CustomerAddress               String?
  CustomerAddressRecipient      String?

  BillingAddress                String?
  BillingAddressRecipient       String?

  ShippingAddress               String?
  ShippingAddressRecipient      String?

  SubTotal                      String?
  TotalDiscount                 String?
  TotalTax                      String?
  InvoiceTotal                  String?
  AmountDue                     String?
  PreviousUnpaidBalance         String?

  RemittanceAddress             String?
  RemittanceAddressRecipient    String?

  ServiceAddress                String?
  ServiceAddressRecipient       String?

  ServiceStartDate              String?
  ServiceEndDate                String?

  VendorTaxId                   String?
  CustomerTaxId                 String?
  PaymentTerm                   String?

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  invoiceTables InvoiceTable[]
}

model InvoiceTable {
  id                          Int      @id @default(autoincrement())
  name                        String?  //Optional table name or label
  invoiceTableDataAsMarkdown  String?     //JSON array of cell objects with row/col info
  rowCount                    Int?
  columnCount                 Int?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  invoice                     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId                   Int   // Foreign key to Invoice, if applicable
}

model UnprocessedInvoice {
  id                            Int      @id @default(autoincrement())
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  fileName                      String    @unique
  originalFileName              String
  mimeType                      String
  filePath                      String
  currentProcessingStatus       String

  projectName                   String?
  invoiceType                   String?
  paymentStatus                 String?

  CustomerName                  String?
  CustomerId                    String?
  PurchaseOrder                 String?
  InvoiceId                     String?
  InvoiceDate                   String?
  DueDate                       String?

  VendorName                    String?
  VendorAddress                 String?
  VendorAddressRecipient        String?

  CustomerAddress               String?
  CustomerAddressRecipient      String?

  BillingAddress                String?
  BillingAddressRecipient       String?

  ShippingAddress               String?
  ShippingAddressRecipient      String?

  SubTotal                      String?
  TotalDiscount                 String?
  TotalTax                      String?
  InvoiceTotal                  String?
  AmountDue                     String?
  PreviousUnpaidBalance         String?

  RemittanceAddress             String?
  RemittanceAddressRecipient    String?

  ServiceAddress                String?
  ServiceAddressRecipient       String?

  ServiceStartDate              String?
  ServiceEndDate                String?

  VendorTaxId                   String?
  CustomerTaxId                 String?
  PaymentTerm                   String?

  fieldConfidences              UnprocessedInvoiceFieldConfidence[]
  invoiceTables                 UnprocessedInvoiceTable[]

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model UnprocessedInvoiceFieldConfidence {
  id           Int      @id @default(autoincrement())
  fieldName    String   // e.g., "projectName", "invoiceTotal"
  confidence   Float    // 0.0 - 1.0
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  invoice      UnprocessedInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId    Int

  @@index([invoiceId, fieldName])
}

model UnprocessedInvoiceTable {
  id                          Int      @id @default(autoincrement())
  name                        String?  //Optional table name or label
  invoiceTableDataAsMarkdown  String?     //JSON array of cell objects with row/col info
  rowCount                    Int?
  columnCount                 Int?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  invoice                     UnprocessedInvoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId                   Int   // Foreign key to Invoice, if applicable
}

enum Role {
  USER
  ADMIN
}

model User{
  id           Int        @id @default(autoincrement())
  firstName    String 
  username     String     @unique
  password     String
  role         Role       @default(USER)
  createdAt    DateTime   @default(now())
  refreshToken String?

  unprocessedInvoices UnprocessedInvoice[]
  invoices            Invoice[]
}